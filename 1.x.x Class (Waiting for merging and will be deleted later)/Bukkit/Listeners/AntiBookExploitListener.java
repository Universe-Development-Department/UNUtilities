package id.universenetwork.utilities.bukkit.Listeners;

import id.universenetwork.utilities.bukkit.Filters.BookFilter;
import id.universenetwork.utilities.bukkit.Filters.FilterAction;
import id.universenetwork.utilities.bukkit.Handlers.BookExploitHandler;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.Lectern;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerEditBookEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.EquipmentSlot;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.jetbrains.annotations.NotNull;

import java.util.logging.Level;

import static id.universenetwork.utilities.bukkit.libraries.InfinityLib.Common.Events.registerListeners;
import static id.universenetwork.utilities.bukkit.manager.Config.ABEEnabled;
import static org.bukkit.Bukkit.getLogger;

public class AntiBookExploitListener implements org.bukkit.event.Listener {
    final BookExploitHandler config;
    final BookFilter bookFilter;

    public AntiBookExploitListener(BookExploitHandler config, BookFilter bookFilter) {
        this.config = config;
        this.bookFilter = bookFilter;
        registerListeners(this);
    }

    @EventHandler(priority = EventPriority.LOW)
    public void onLecternRead(@NotNull PlayerInteractEvent event) {
        if (BookExploitHandler.lecternSupport && ABEEnabled()) {
            Player p = event.getPlayer();
            if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
            Block clickedBlock = event.getClickedBlock();
            if (clickedBlock == null || !clickedBlock.getType().equals(Material.LECTERN)) return;
            Lectern lectern = (Lectern) clickedBlock.getState();
            ItemStack toFilter = lectern.getInventory().getItem(0);
            ItemStack filtered = bookFilter.filterBook(toFilter, p, FilterAction.READ);
            if (filtered != null) {
                getLogger().log(Level.WARNING, "Player {0} {1} tried to read a lectern book with illegal click events!", new Object[]{p.getName(), p.getUniqueId()});
                lectern.getInventory().setItem(0, filtered);
                if (config.getPlayerMessage() != null) p.sendMessage(config.getPlayerMessage());
            }
        }
    }

    @EventHandler(priority = EventPriority.LOW)
    public void onBookEdit(@NotNull PlayerEditBookEvent event) {
        if (ABEEnabled()) {
            Player player = event.getPlayer();
            BookMeta filteredBookMeta = bookFilter.filterBookMeta(event.getNewBookMeta(), player, FilterAction.CREATE);
            if (filteredBookMeta != null) {
                getLogger().log(Level.WARNING, "Player {0} {1} tried to create a book with illegal click events!", new Object[]{player.getName(), player.getUniqueId()});
                event.setNewBookMeta(filteredBookMeta);
                if (config.getPlayerMessage() != null) player.sendMessage(config.getPlayerMessage());
            }
        }
    }

    @EventHandler(priority = EventPriority.LOW)
    public void onBookRead(@NotNull PlayerInteractEvent event) {
        if (ABEEnabled()) {
            Player player = event.getPlayer();
            if (!event.getAction().equals(Action.RIGHT_CLICK_AIR) && !event.getAction().equals(Action.RIGHT_CLICK_BLOCK))
                return;
            ItemStack toFilter;
            if (event.getHand().equals(EquipmentSlot.OFF_HAND)) toFilter = player.getInventory().getItemInOffHand();
            else toFilter = player.getInventory().getItemInMainHand();
            ItemStack filtered = bookFilter.filterBook(toFilter, player, FilterAction.READ);
            if (filtered != null) {
                getLogger().log(Level.WARNING, "Player {0} {1} tried to read a book with illegal click events!", new Object[]{player.getName(), player.getUniqueId()});
                event.setCancelled(true);
                if (event.getHand().equals(EquipmentSlot.OFF_HAND)) player.getInventory().setItemInOffHand(filtered);
                else player.getInventory().setItemInMainHand(filtered);
                player.updateInventory();
                if (config.getPlayerMessage() != null) player.sendMessage(config.getPlayerMessage());
            }
        }
    }
}